[{"H:\\ReactProjects\\todoapp\\src\\index.js":"1","H:\\ReactProjects\\todoapp\\src\\reportWebVitals.js":"2","H:\\ReactProjects\\todoapp\\src\\App.js":"3","H:\\ReactProjects\\todoapp\\src\\Todo.js":"4","H:\\ReactProjects\\todoapp\\src\\firebase.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":1578,"mtime":1609691364291,"results":"9","hashOfConfig":"7"},{"size":2122,"mtime":1609691148737,"results":"10","hashOfConfig":"7"},{"size":546,"mtime":1609676311091,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"gh2cs5",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"H:\\ReactProjects\\todoapp\\src\\index.js",[],["24","25"],"H:\\ReactProjects\\todoapp\\src\\reportWebVitals.js",[],"H:\\ReactProjects\\todoapp\\src\\App.js",[],"H:\\ReactProjects\\todoapp\\src\\Todo.js",["26"],"import React, {useState} from 'react';\r\nimport './Todo.css';\r\nimport { Button, List, ListItem, ListItemText, ListItemAvatar, Modal } from '@material-ui/core';\r\nimport db from './firebase';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\n\r\nfunction Todo(props) {\r\n        const classes = useStyles();\r\n        const[open,setOpen] = useState(false);\r\n        const[input, setInput] = useState();\r\n\r\n        const handleOpen = () => {\r\n            setOpen(true);\r\n        };\r\n\r\n        const updateTodo = () => {\r\n            //update the todo with the new input text\r\n            db.collection('todos').doc(props.todo.id).set({\r\n                todo: input\r\n            }, {merge: true});\r\n\r\n            setOpen(false);\r\n        }\r\n\r\n    return (\r\n        <>\r\n        <Modal\r\n            open={open}\r\n            onClose={e => setOpen(false)}\r\n        >\r\n            <div className={classes.paper}>\r\n                {/* <h1>I am a modal</h1> */}\r\n                <input placeholder={props.todo.todo} value={input} onChange={event => setInput(event.target.value)} />\r\n                <Button disabled={!input} variant=\"contained\" color=\"secondary\" onClick={updateTodo}>Update</Button>\r\n            </div>\r\n        </Modal>\r\n        <List className=\"todo__list\">\r\n            <ListItem>\r\n                <ListItemAvatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={props.todo.todo} />\r\n            </ListItem>\r\n            <Button variant=\"outlined\" color=\"secondary\" onClick={e => setOpen(true)}>Edit</Button>\r\n\r\n            <DeleteForeverIcon variant=\"contained\" color=\"secondary\" onClick={event => db.collection('todos').doc(props.todo.id).delete()} />\r\n        </List>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","H:\\ReactProjects\\todoapp\\src\\firebase.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":24,"column":15,"nodeType":"33","messageId":"34","endLine":24,"endColumn":25},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'handleOpen' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]